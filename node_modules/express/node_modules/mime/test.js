/**
<<<<<<< HEAD
 * Usage: node test.js
 */

var mime = require('./mime');
var assert = require('assert');

function eq(a, b) {
  console.log('Test: ' + a + ' === ' + b);
  assert.strictEqual.apply(null, arguments);
}

console.log(Object.keys(mime.extensions).length + ' types');
console.log(Object.keys(mime.types).length + ' extensions\n');

//
// Test mime lookups
//

eq('text/plain', mime.lookup('text.txt'));
eq('text/plain', mime.lookup('.text.txt'));
eq('text/plain', mime.lookup('.txt'));
eq('text/plain', mime.lookup('txt'));
eq('application/octet-stream', mime.lookup('text.nope'));
eq('fallback', mime.lookup('text.fallback', 'fallback'));
eq('application/octet-stream', mime.lookup('constructor'));
eq('text/plain', mime.lookup('TEXT.TXT'));
eq('text/event-stream', mime.lookup('text/event-stream'));
eq('application/x-web-app-manifest+json', mime.lookup('text.webapp'));

//
// Test extensions
//

eq('txt', mime.extension(mime.types.text));
eq('html', mime.extension(mime.types.htm));
eq('bin', mime.extension('application/octet-stream'));
eq(undefined, mime.extension('constructor'));

//
// Test node types
//

eq('application/octet-stream', mime.lookup('file.buffer'));
eq('audio/mp4', mime.lookup('file.m4a'));

//
// Test charsets
//

eq('UTF-8', mime.charsets.lookup('text/plain'));
eq(undefined, mime.charsets.lookup(mime.types.js));
eq('fallback', mime.charsets.lookup('application/octet-stream', 'fallback'));

console.log('\nOK');
=======
 * Requires the async_testing module
 *
 * Usage: node test.js
 */
var mime = require('./mime');
exports["test mime lookup"] = function(test) {
  // easy
  test.equal('text/plain', mime.lookup('text.txt'));

  // hidden file or multiple periods
  test.equal('text/plain', mime.lookup('.text.txt'));

  // just an extension
  test.equal('text/plain', mime.lookup('.txt'));

  // just an extension without a dot
  test.equal('text/plain', mime.lookup('txt'));

  // default
  test.equal('application/octet-stream', mime.lookup('text.nope'));

  // fallback
  test.equal('fallback', mime.lookup('text.fallback', 'fallback'));

  test.finish();
};

exports["test extension lookup"] = function(test) {
  // easy
  test.equal('txt', mime.extension(mime.types.text));
  test.equal('html', mime.extension(mime.types.htm));
  test.equal('bin', mime.extension('application/octet-stream'));

  test.finish();
};

exports["test mime lookup uppercase"] = function(test) {
  // easy
  test.equal('text/plain', mime.lookup('TEXT.TXT'));

  // just an extension
  test.equal('text/plain', mime.lookup('.TXT'));

  // just an extension without a dot
  test.equal('text/plain', mime.lookup('TXT'));

  // default
  test.equal('application/octet-stream', mime.lookup('TEXT.NOPE'));

  // fallback
  test.equal('fallback', mime.lookup('TEXT.FALLBACK', 'fallback'));

  test.finish();
};

exports["test custom types"] = function(test) {
  test.equal('application/octet-stream', mime.lookup('file.buffer'));
  test.equal('audio/mp4', mime.lookup('file.m4a'));

  test.finish();
};

exports["test charset lookup"] = function(test) {
  // easy
  test.equal('UTF-8', mime.charsets.lookup('text/plain'));

  // none
  test.ok(typeof mime.charsets.lookup(mime.types.js) == 'undefined');

  // fallback
  test.equal('fallback', mime.charsets.lookup('application/octet-stream', 'fallback'));

  test.finish();
};

if (module == require.main) {
  require('async_testing').run(__filename, process.ARGV);
}
>>>>>>> c251a94dd6031a4795c2f49c9b5401214fc0a9b4
